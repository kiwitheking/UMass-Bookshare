var Sequelize = require("sequelize");
var bcrypt = require("bcrypt");
var exports = module.exports = {};

var DB_Interface = require("DB_Interface");
var sequelize = DB_Interface.getServer; //get the server connection.

/*
    Define the "model" for the "user" table.
    This is the structure Sequelize will use when accessing the DB.
*/
var UsersTable = exports.userstable = sequelize.define("Users",{
    username:{
        type: Sequelize.STRING(20),
        primaryKey: true,
        validate:{
            isAlphanumeric: true
        }
    },
    
    password: Sequelize.STRING(128),
    
    age: {
        type: Sequelize.INTEGER,
        validate:{
            isInt: true
        }
    },
    
    firstname: Sequelize.STRING(30),
    
    lastname: Sequelize.STRING(30),
    
    sex: { //Three options, male, female, other.
        type: Sequelize.STRING(1),
        validate:{
            is: /^m$|^f$|^o$/i //Should be either a "m", "f", or "o", case insensitive
        }
    },
    
    email: {
        type: Sequelize.STRING(50),
        validate:{
            isEmail: true
        }
    },
    
    phone: {
        type: Sequelize.STRING(12),
        validate:{
            isNumeric: true
        }
    },
    
    institution: Sequelize.STRING(60),
    
    profilepic: Sequelize.STRING(255)
    },
    {
    timestamps: false,
    freezeTableName: true,
    tableName: "users"
});
exports.table = UsersTable;

/**
 * Adds a user to the DB and passes the information to a supplied function. If the username already exists in the DB no new row will be added.
 * @param {String} username_ 
 * @param {String} password_ The unsalted + hashed password.
 * @param {String} age_ 
 * @param {String} firstName_
 * @param {String} lastName_
 * @param {String} sex_ m,f,o are the 3 allowed options
 * @param {String} email_
 * @param {String} phone_
 * @param {String} institution_
 * @param {String} function_ When the DB returns the result of adding a row this function is run with the result as parameters.
 */ //TODO: success and error handling
exports.addUser =  function addUser(username_, password_, age_, firstName_, lastName_, sex_, email_, phone_,institution_, function_)
{
	var found = UsersTable.findOrCreate({ where: {username: username_},
		/*
			Details to be added if no row with the same username is found.
		*/
		defaults:{
			username: username_,
			password: password_,
			age: age_,
			firstname: firstName_,
			lastname: lastName_,
			sex: sex_,
			email: email_,
			phone: phone_,
			institution: institution_
		}
	});
	found.then(function(record){
		//record[0].options.isNewRecord if you need the boolean.
		function_(record); //created is at record[1] so this passes everything.
	});
}

exports.addUserBasic =  function addUserBasic(username_, password_, age_, firstName_, lastName_, sex_, email_, phone_,institution_,res_,req_)
{
    var found = UsersTable.findOrCreate({ where: {username: username_},
        /*
            Details to be added if no row with the same username is found.
        */
        defaults:{
            username: username_,
            password: password_,
            age: age_,
            firstname: firstName_,
            lastname: lastName_,
            sex: sex_,
            email: email_,
            phone: phone_,
            institution: institution_
        }
    });
    found.success(function(result){
        req_.session.user = username_;
            res_.redirect('/profile');
    });
}

/**
* Returns user information based off their username. All field, but the password, are returned in an array and passed through the supplied function.
* @param username_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of the user's values or null if not found
*/
exports.getUser = function getUser(username_, function_)
{
	var found = UsersTable.findOne({
		where: {username: username_}
	});
	found.then(function(record){
		var userValues = null;
		if(record != null)
		{
			//Remove white space used to pad rows to length.
			userValues = {
                username : record.dataValues.username.trim(),
                password : record.dataValues.password.trim(),
                age : record.dataValues.age,
                firstname : record.dataValues.firstname.trim(),
                lastname : record.dataValues.lastname.trim(),
                sex : record.dataValues.sex,
                email : record.dataValues.email.trim(),
                phone : record.dataValues.phone.trim(),
                institution : record.dataValues.institution.trim()
            } ;
		}
		function_(userValues);
	});
}


exports.editProfile = function editProfile(username_, res, req)
{
    var found = UsersTable.findOne({
        where: {username: username_}
    });
    found.then(function(record){
        var userValues = null;
        if(record != null)
        {
            //Remove white space used to pad rows to length.
            userValues = {
                username : record.dataValues.username.trim(),
                password : record.dataValues.password.trim(),
                age : record.dataValues.age,
                firstname : record.dataValues.firstname.trim(),
                lastname : record.dataValues.lastname.trim(),
                sex : record.dataValues.sex,
                email : record.dataValues.email.trim(),
                phone : record.dataValues.phone.trim(),
                institution : record.dataValues.institution.trim()
            } ;
        }
        row = userValues;
        res.render('../views/editprofile',{ username: row.username, fname: row.firstname, 
              lname: row.lastname, email: row.email, phone: row.phone, institution: row.institution});
    });
}


exports.updateProfile = function updateProfile(username_, fname_, lname_, email_, phone_, institution_, res, req)
{
    var found = sequelize.query("update users set firstname=\'" +fname_+ "\', lastname=\'" +lname_+ "\', email=\'" +email_+ "\', phone=\'" +phone_+ "\', institution=\'" +institution_+ "\' where username=\'" +username_+ "\';");
    found.finally(function(){
       res.redirect('/profile');

    });

}



exports.checkUser = function checkUser(username_, password_, age_, firstName_, lastName_, sex_, email_, phone_,institution_, res_,req_)
{
    var found = UsersTable.findOne({
        where: {username: username_}
    });
    found.then(function(record){
        var userValues = null;
        if(record != null)
        {
         res_.render('signup', { message: 'Username taken. Please try another.' });
        }
        else{
            DB_Interface.addUserBasic(username_, password_, age_, firstName_, lastName_, sex_, email_, phone_, institution_,res_,req_);
            // res_.render('profile', { message: 'Account created' });
        }
    });
}

/**
* Insecure method of verifying user information at the moment, a plaintext password is passed and checked against the DB's field.
*/
exports.verifyUser = function verifyUser(username_, pass_, function_)
{
    var found = UsersTable.findOne({
        where: {username: username_} 
    });
    found.then(function(record){
        var userValues = false;
        if(record != null)
        {
            userValues = (pass_ === record.dataValues.password.trim());
        }
        function_(userValues);
    })
}
exports.loginUser = function loginUser(username_, pass_, res_, req_)
{
    var found = UsersTable.findOne({
        where: {username: username_} 
    });
    found.then(function(record){
   
        if (record == null) {
            console.log('no record');
            res_.render('../views/login', { message: 'Invalid email or password.' });

          } else {
            bcrypt.compare(pass_, record.dataValues.password.trim(), function(err, matches){
                   if(err){
                        console.log("Error!");
                       res_.redirect('/');
                    } else if(matches) {
                        console.log("The password is valid!");
                        req_.session.user = username_;
                        console.log('redirect');
                        res_.redirect('/profile');
                    } else {
                        console.log("The password is not valid!");
                        res_.render('../views/login', { message: 'Invalid email or password.' });
                    }
            });
          }
    })
}

exports.getProfile = function getProfile(username_, res_, req_)
{

    var list = sequelize.query(
        // "SELECT * FROM listing 
        // WHERE isbn13 = \'" +isbn13_+ "\';", ListTable

        // Change ORDER BY:
        "Select listing.*, book.author, book.title,book.cover, book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 WHERE listing.username = \'" +username_+ "\' ORDER BY listdate desc;"
    );

    list.then(function(record) {
        // console.log("ROWCOUNT : " + record[1].rowCount);
        if(record != null)
        {
            var listValues = [];
            for(var i = 0; i < record[1].rowCount; i++){
                listValues[i] = {
                    //do we need to put price in here?
                    listid : record[0][i].listid,
                    username : record[0][i].username.trim(),
                    author : record[0][i].author,
                    title  : record[0][i].title,
                    isbn13 : record[0][i].isbn13,
                    version : record[0][i].version,
                    forrent : record[0][i].forrent,
                    rentprice : record[0][i].rentprice,
                    forsale : record[0][i].forsale,
                    sellprice : record[0][i].sellprice,
                    forborrow : record[0][i].forborrow,
                    available : record[0][i].available,
                    description : record[0][i].description,
                    listdate : record[0][i].listdate,
                    cover : record[0][i].cover
                }
            }
            selling = listValues;
            return selling;
        }
    });
    list.finally(function(){});
    list.then(function(record){});

    var wish = sequelize.query(
        // Add version?
        "Select book.author, book.title, book.cover, book.isbn13, book.version, Wishlist.wishDate FROM Wishlist INNER JOIN book ON Wishlist.isbn13=book.isbn13 WHERE Wishlist.username = \'" + username_ +"\' ORDER BY wishDate desc;"
    );

    wish.then(function(record) {
        // console.log(record[1].rowCount);
        if(record != null)
        {
            var listValues = [];
            for(var i = 0; i < record[1].rowCount; i++){
                listValues[i] = {
                    author : record[0][i].author,
                    title  : record[0][i].title,
                    isbn13  : record[0][i].isbn13,
                    version : record[0][i].version,
                    wishDate : record[0][i].wishDate,
                    cover : record[0][i].cover
                }
            }
            wishList = listValues;
            return wishList;
        }
    });
    wish.finally(function(){});
    wish.then(function(record){});
    var found = UsersTable.findOne({
        where: {username: username_} 
    });
    found.then(function(record){
        username = record.dataValues.username.trim();
        password = record.dataValues.password.trim();
        age = record.dataValues.age;
        firstname = record.dataValues.firstname.trim();
        lastname = record.dataValues.lastname.trim();
        sex = record.dataValues.sex;
        email = record.dataValues.email.trim();
        phone = record.dataValues.phone.trim();
        institution = record.dataValues.institution.trim();
        if(record.dataValues.profilepic === null)
            { profilepic = ''}
        else{ profilepic = record.dataValues.profilepic; }
        if (record == null) {
            req_.session.reset();
            res_.redirect('/'); 
          } else {
            res_.render('../views/profile', { username: username, fname: firstname, 
            lname: lastname, email: email, phone: phone, school: institution, profilepic:profilepic, wishList: wishList,selling: selling});
          }
    })
}    

exports.viewProfile = function viewProfile(username_, res_,req_)
{
    var found = UsersTable.findOne({
        where: {username: username_}
    });
    found.then(function(record){
        var hi = null;
        if(record != null)
        {
            //Remove white space used to pad rows to length.
            hi = {
                username : record.dataValues.username.trim(),
                password : record.dataValues.password.trim(),
                age : record.dataValues.age,
                firstname : record.dataValues.firstname.trim(),
                lastname : record.dataValues.lastname.trim(),
                sex : record.dataValues.sex,
                email : record.dataValues.email.trim(),
                phone : record.dataValues.phone.trim(),
                institution : record.dataValues.institution.trim(),
                profilepic : record.dataValues.profilepic
            } ;
        }
        userValues = hi;
        console.log(userValues);
        res_.render('../views/sellerprofile',userValues);
    });
}

exports.addProfilePic = function addProfilePic(username_, imgpath_, function_)
{
        var found = sequelize.query("UPDATE users SET profilepic = \'" + imgpath_ + "\' WHERE username = \'" + username_ + "\';", UsersTable);
        found.then(function(record){
                function_.redirect('/profile');
        });
}

