var Sequelize = require("sequelize");
var exports = module.exports = {};
var DB_Interface = require("DB_Interface");
var uuid = require("uuid");
var sequelize = DB_Interface.getServer;
var bookInterface = require("DB_book");
var bookTable = bookInterface.table;
var userInterface = require("DB_user");
var userTable = userInterface.table;
var nodemailer = require('nodemailer');

// create reusable transporter object using SMTP transport
var transporter = nodemailer.createTransport({
    service: 'Gmail',
    auth: {
        user: 'bookshareumass@gmail.com',
        pass: 'walterdoan'
    }
});



var ListTable = sequelize.define("listing",{
	listid :{ 
		type : Sequelize.STRING(32),
        primaryKey: true,
	},
	username: {
		type: Sequelize.STRING(20),
	},
	isbn13: Sequelize.STRING(13),
	forrent: Sequelize.BOOLEAN,
	rentprice: Sequelize.STRING(10), // What type?
	forsale: Sequelize.BOOLEAN,
	sellprice: Sequelize.STRING(10),	// What type??
	forborrow: Sequelize.BOOLEAN,
	available: Sequelize.BOOLEAN,
	description: Sequelize.STRING(500),
	listdate: Sequelize.DATE},
	{
		timestamps: false,
    	freezeTableName: true,
    	tableName: "listing"
	}
	);

ListTable.belongsTo(bookTable, { foreignKey: "isbn13" });
ListTable.belongsTo(userTable, { foreignKey: "username" });

exports.makeListing = function makeListing_(username_, isbn13_, forRent_, rentPrice_, forSale_, sellPrice_, forBorrow_, available_, description_, res_,req_)
{
	listID_ = uuid.generateUUID().substring(0,32);
	var d = new Date();
	found = ListTable.findOrCreate({where : {listid : listID_},
		defaults:{
			listid : listID_,
			username : username_,
			isbn13 : isbn13_,
			forrent : forRent_,
			rentprice : rentPrice_,
			forsale : forSale_,
			sellprice : sellPrice_,
			forborrow : forBorrow_,
			available : true,
			description : description_,
			listdate : d.toString(d.getTime())
		}
	});
	found.then(function(record){
		if(record[0].options.isNewRecord){
			//function_(record);
		}
		else{
			// makeListing_(username_, isbn13_, forRent, forSale, forBorrow_, function_); //try again w/ another UUID, lol, what are the odds? (functionally 0).
			makeListing_(username_, isbn13_, forRent, rentPrice, forSale, sellPrice, forBorrow, description, res_,req_); 
		}
	});
	found.finally(function(){
			res_.render('createlisting',{message:'Listing created'});

	});
	//check if listing is in anyone wishlist
	var send = sequelize.query(
		"Select book.author, book.title, book.isbn13, Wishlist.username,users.firstname,users.lastname, users.email FROM Wishlist INNER JOIN book ON Wishlist.isbn13=book.isbn13 INNER JOIN users ON Wishlist.username=users.username WHERE Wishlist.isbn13= \'" + isbn13_ +"\';"
	);

	send.then(function(record) {
		// console.log(record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					author : record[0][i].author,
					title  : record[0][i].title,
					isbn13  : record[0][i].isbn13,
					username : record[0][i].username,
					firstname : record[0][i].firstname,
					lastname : record[0][i].lastname,
					email : record[0][i].email
				}
			}
			wishList = listValues;
			for(var j = 0; j < wishList.length; j++){
				var mailOptions = {
				    from: 'UMass Bookshare <bookshareumass@gmail.com>', // sender address
				    to: wishList[j].email, // list of receivers
				    subject: 'A Book You Wanted is Available', // Subject line
				    text: wishList[j].title + ' is available', // plaintext body
				    html: '<b>'+ wishList[j].title + ' is available' +'</b>' // html body
				};

				transporter.sendMail(mailOptions, function(error, response){
				    if(error){
				        console.log(error);
				    }else{
				        console.log("Message sent: " + response.message);
				    }
				});
			}
		
		}
		else
		{
			console.log("Not in anyones wishlist")
			return;
		}
	});

}

// getListing
exports.getListing = function getListing_(listid_, function_)
{
	var found = sequelize.query(
		// "SELECT * FROM listing WHERE listid = \'" +listid_+ "\';", ListTable
		"Select listing.*, book.author, book.title, book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 WHERE listing.listid = \'" +listid_+ "\';"

		// Change ORDER BY:
		// "Select listing.*, book.author, book.title, book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 WHERE listing.isbn13 = \'" +isbn13_+ "\' ORDER BY listdate desc;"
	);
	found.then(function(record){
		var listValues = null;
		if(record != null)
		{	
			// Format prices
			record[0][0].rentprice = [record[0][0].rentprice.slice(0, record[0][0].rentprice.size-2), ".", record[0][0].rentprice.slice(record[0][0].rentprice.size-2)].join('');
			record[0][0].sellprice = [record[0][0].sellprice.slice(0, record[0][0].sellprice.size-2), ".", record[0][0].sellprice.slice(record[0][0].sellprice.size-2)].join('');

			listValues = {
				listid : record[0][0].listid,
				username : record[0][0].username.trim(),
				author : record[0][0].author,
				title  : record[0][0].title,
				isbn13 : record[0][0].isbn13,
				version : record[0][0].version,
				forrent : record[0][0].forrent,
				rentprice : record[0][0].rentprice,
				forsale : record[0][0].forsale,
				sellprice : record[0][0].sellprice,
				forborrow : record[0][0].forborrow,
				available : record[0][0].available,
				description : record[0][0].description,
				listdate : record[0][0].listdate
			}
		}
		// function_(listValues);
		hello = listValues;
		function_.render('../views/listing', hello);

	});
}

// delete listing
exports.deleteListing = function deleteListing_(listid_, res_, req_)
{
	var found = sequelize.query(
		"DELETE from listing WHERE listing.listid = \'" +listid_+ "\';"

	);
	found.then(function(record){
		res_.redirect('/profile');
	});
	found.finally(function(){});
}

exports.editListing = function editListing(listid_, res_, req_)
{
    var found = ListTable.findOne({
        where: {listid: listid_}
    });
    found.then(function(record){
    	console.log(record.dataValues);
        var listValues = null;
        if(record != null)
        {
            //Remove white space used to pad rows to length.
            listValues = {
            	listid : record.dataValues.listid.trim(),
				forrent : record.dataValues.forrent,
				rentprice : record.dataValues.rentprice.trim(),
				forsale : record.dataValues.forsale,
				sellprice : record.dataValues.sellprice.trim(),
				forborrow : record.dataValues.forborrow,
				available : record.dataValues.available,
				description : record.dataValues.description.trim()
            } ;
        }
        row = listValues;
        res_.render('../views/editlisting',{ listid: row.listid, forrent: row.forrent, 
              rentprice: row.rentprice, forsale: row.forsale, sellprice: row.sellprice, forborrow: row.forborrow,
          		available: row.available, description: row.description});
    });
}

//update listing
exports.updateListing = function updateListing(listid, forRent, rentPrice, forSale, sellPrice, forBorrow, available, description, res, req)
{
    var found = sequelize.query("update listing set forrent=\'" +forRent+ "\', rentprice=\'" +rentPrice+ "\', forsale=\'" +forSale+ "\', sellprice=\'" +sellPrice+ "\', forborrow=\'" +forBorrow+ "\', available=\'" +available+ "\', description=\'" +description+ "\' where listid=\'" +listid+ "\';");
    found.finally(function(){
       res.redirect('/profile');

    });

}

exports.findUsersListing = function findUserListing_(username_, function_)
{
	found = ListTable.findAll(
		{where : [{username : username_}, {available : true}]
	});
	found.then(function(record) {
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record.length; i++){
				listValues[i] = {
					listid : record[i].dataValues.listid,
					username : record[i].dataValues.username.trim(),
					isbn13 : record[i].dataValues.isbn13,
					forrent : record[i].dataValues.forrent,
					rentprice : record[i].dataValues.rentprice,
					forsale : record[i].dataValues.forsale,
					sellprice : record[i].dataValues.sellprice,
					forborrow : record[i].dataValues.forborrow,
					available : record[i].dataValues.available,
					description : record[i].dataValues.description.trim(),
					listdate : record[i].dataValues.listdate
				}
			}
			function_(listValues);
		}
	});
}

exports.findBookListing = function findBookListing_(isbn13_, function_)
{
	found = ListTable.findAll(
		{where : [{isbn13 : isbn13_}, {available : true}]
	});
	found.then(function(record) {
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record.length; i++){
				listValues[i] = {
					listid : record[i].dataValues.listid,
					username : record[i].dataValues.username.trim(),
					isbn13 : record[i].dataValues.isbn13,
					forrent : record[i].dataValues.forrent,
					rentprice : record[i].dataValues.rentprice,
					forsale : record[i].dataValues.forsale,
					sellprice : record[i].dataValues.sellprice,
					forborrow : record[i].dataValues.forborrow,
					available : record[i].dataValues.available,
					description : record[i].dataValues.description.trim(),
					listdate : record[i].dataValues.listdate
				}
			}
			function_(listValues);
		}
	});
}

exports.postBookListing = function findBookListing_(isbn13_, res_)
{
	var found = sequelize.query(
		// "SELECT * FROM listing 
		// WHERE isbn13 = \'" +isbn13_+ "\';", ListTable

		// Change ORDER BY:
		"Select listing.*, book.author, book.title, book.cover,book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 WHERE listing.isbn13 = \'" +isbn13_+ "\' ORDER BY listdate desc;"
	);

	found.then(function(record) {
		// console.log("ROWCOUNT : " + record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					//do we need to put price in here?
					listid : record[0][i].listid,
					username : record[0][i].username.trim(),
					author : record[0][i].author,
					title  : record[0][i].title,
					isbn13 : record[0][i].isbn13,
					version : record[0][i].version,
					forrent : record[0][i].forrent,
					rentprice : record[0][i].rentprice,
					forsale : record[0][i].forsale,
					sellprice : record[0][i].sellprice,
					forborrow : record[0][i].forborrow,
					available : record[0][i].available,
					description : record[0][i].description,
					listdate : record[0][i].listdate,
					cover : record[0][i].cover
				}
			}
			hi = listValues;
			res_.render('../views/listResult', hi);
		}
		else{
			res_.render('../views/noListing');
		}
	});
}

exports.recentListing = function recentListing_(res_,req_)
{
	var found = sequelize.query(
		// Add version?
		"Select listing.listid,listing.username, listing.rentprice, listing.forrent, listing.forsale, listing.forborrow, listing.sellprice, listing.description, book.author,book.cover, book.title, book.isbn13, book.version FROM listing INNER JOIN book ON book.isbn13=listing.isbn13 ORDER BY listdate desc;"
	);

	found.then(function(record) {
		// console.log(record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					listid : record[0][i].listid,
					username : record[0][i].username,
					author : record[0][i].author,
					title  : record[0][i].title,
					isbn13  : record[0][i].isbn13,
					version : record[0][i].version,
					forrent : record[0][i].forrent,
					rentprice  : record[0][i].rentprice,
					forsale : record[0][i].forsale,
					sellprice  : record[0][i].sellprice,
					forborrow : record[0][i].forborrow,
					description : record[0][i].description,
					cover : record[0][i].cover
				}
			}
			recent = listValues;
			res_.render('../views/home', recent);
		}
	});
}

exports.wishListing = function wishListing_(username_,res_,req_)
{
	var found = sequelize.query(
		// Add version?
		"Select book.author, book.title, book.isbn13, book.version, book.cover, Wishlist.wishDate FROM Wishlist INNER JOIN book ON Wishlist.isbn13=book.isbn13 WHERE Wishlist.username = \'" + username_ +"\' ORDER BY wishDate desc;"
	);

	found.then(function(record) {
		// console.log(record[1].rowCount);
		if(record != null)
		{
			var listValues = [];
			for(var i = 0; i < record[1].rowCount; i++){
				listValues[i] = {
					author : record[0][i].author,
					title  : record[0][i].title,
					isbn13  : record[0][i].isbn13,
					version : record[0][i].version,
					wishDate : record[0][i].wishDate,
					cover : record[0][i].cover
				}
			}
			wishList = listValues;
			res_.render('../views/wishlist', wishList);
		}
		else
		{
			res_.render('../views/nowishlist');
		}
	});
}

exports.addwishListing = function addwishListing_(username_,isbn13_,res_,req_)
{
	var today = new Date();
	var dd = today.getDate();
	var mm = today.getMonth()+1; //January is 0!
	var yyyy = today.getFullYear();

	if(dd<10) {
	    dd='0'+dd
	} 

	if(mm<10) {
	    mm='0'+mm
	} 

	today = mm+'/'+dd+'/'+yyyy;
	var found = sequelize.query(
		// Add version?
		"insert into Wishlist values(\'" + username_ +"\',\'" + isbn13_ +"\',\'" + today +"\');"
	);

	found.then(function(record) {});
	found.success(function(record){});
	found.finally(function(){
			DB_Interface.wishListing(username_,res_,req_);

	});
}

exports.makenotAvailable = function notAvailable_(listid_, function_)
{
	// found = ListTable.findOne(
	// 	{where : {listid : listid_},
	// });
	// found.then(function(record){
	// 	console.log(typeof function_ + " sfasdfasdfsda");
	// 	if(found){
	// 		console.log(typeof found + " dddsfasdfasdfsda");
	// 		found2 = found.updateAttributes({available : false});
	// 		console.log(typeof found2 + " daaaaddsfasdfasdfsda");
	// 		if(found2){
	// 			found2.then(function(record2){
	// 					console.log(typeof function_ + "sfasdfasdfsda");
	// 					function_(record2);
	// 				});
	// 		}
	// 	}
	// });

	var found3 = sequelize.query("UPDATE listing SET available = \'false\'  WHERE listid = \'" + listid_ +"\';", ListTable);
	found3.then(function(record){
		if(typeof function_ == "function"){}
			function_(record);
	});
}
