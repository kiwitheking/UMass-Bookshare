var Sequelize = require("sequelize");
var exports = module.exports = {};
var DB_Interface = require("DB_Interface");
var sequelize = DB_Interface.getServer;
var search = null //require("search");
var ISBNDB = require('isbndbjs');
var isbnisValid = require('isbn-validator');
var isbncover = require('node-isbn');
ISBNDB.initialize("B7R1VC2A");

/*
    Define the "model" for the book table.
    This is the structure Sequelize will use when accessing the DB.
*/
var BookTable = exports.booktable = sequelize.define("Book", {
    title: Sequelize.STRING(255),
    author: Sequelize.STRING(60),
    isbn10: Sequelize.STRING(10),
    isbn13: {
        type: Sequelize.STRING(13),
        primaryKey: true
    },
    publicationdate: Sequelize.DATE,
    version: Sequelize.INTEGER,
    cover: Sequelize.STRING(255),
    },

    {
    timestamps: false,
    freezeTableName: true,
    tableName: "book"
});
exports.table = BookTable;

/**
* Search for results that partially match the specified fields. This is deprecated and you should use search/searchHandler instead.
* @param title_ Book title to search for
* @param author_ Book author to search for
* @param version_ Version of the book to search for
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return JSON like object of possible books, the results will need to be refined to get proper ordering.
*/
exports.searchBook = function searchBook(query_, function_)
{
	query_=query_.toUpperCase();
	var bookresult = sequelize.query(
			"SELECT * FROM book WHERE isbn10 = \'" +query_+ "\' OR isbn13 = \'" +query_+ "\' OR UPPER(title) LIKE \'%" +query_+ "%\' OR UPPER(author) LIKE \'%" +query_+ "%\';", BookTable
			 );
	
	bookresult.then(function(record){
		function_(record);
	});
}

//may not be used as we don't use this for searching books anymore
exports.searchPost = function searchBook(query_, res_)
{
	query_=query_.toUpperCase();
	var bookresult = sequelize.query(
			"SELECT * FROM book WHERE isbn10 = \'" +query_+ "\' OR isbn13 = \'" +query_+ "\' OR UPPER(title) LIKE \'%" +query_+ "%\' OR UPPER(author) LIKE \'%" +query_+ "%\';", BookTable
			 );
	
	bookresult.then(function(record){
		console.log(record);
		hi = record;
		res_.render('../views/searchResult',hi);
	});
}


/**
* Adds a book to the DB and passes the information to a supplied function. If the isbn13 already exists in the DB no new row will be added.
* @param title_ 
* @param author_
* @param isbn10_
* @param isbn13_
* @param publicationDate_
* @param version_
* @param cover_
* @param function_ The result of the search will be passed as a parameter to this function. 
* @return record[0].options.isNewRecord if you need just a boolean
*/
exports.addBook = function addBook(title_, author_, isbn10_, isbn13_, publicationDate_, version_, cover_, function_)
{
	console.log("adding book to db");
	var found = BookTable.findOrCreate({ where: {isbn13: isbn13_},
		defaults: {
			title: title_,
			author: author_,
			isbn10: isbn10_,
			isbn13: isbn13_,
			publicationdate: publicationDate_,
			version: version_,
			cover: cover_
		}
	});
	found.then(function(record){
		console.log(typeof function_ + "!!");
		function_(record);
	});
}

//adds book by isbn using ISBNDB
//creates listing after getting book info from ISBNDB
//also adds book cover for book
exports.addBookbyISBN = function addBookbyISBN(isbn13_,username, forRent, rentPrice, forSale, sellPrice, forBorrow, available, description, res, req)
{
	ISBNDB.Books.get(isbn13_)
	.then(function(bookData){
		a = bookData.author_data[0].name.split(", ");
		author = a[1]+ " "+a[0];
		console.log(author);
		console.log(bookData);
		publicationDate_ = null;
		version_ = 1;
		cover_ = null;
		var found = BookTable.findOrCreate({ where: {isbn13: isbn13_},
		defaults: {
			title: bookData.title,
			author: author,
			isbn10: bookData.isbn10,
			isbn13: bookData.isbn13,
			publicationdate: null,
			version: version_,
			cover: null
		}
	});
		found.then(function(record){});
		found.success(function(record){});
		found.finally(function(){
			DB_Interface.makeListing(username, isbn13_, forRent, rentPrice, forSale, sellPrice, forBorrow, available, description, res, req);
			isbncover.resolve(isbn13_, function(error,book){
				if(error){
					console.log("Book cover not found");
				}
				else{
					DB_Interface.addBookCover(isbn13_, book.imageLinks.thumbnail, null);
				}
			});
		});


	}, function(errorObject){
	  // .... Handle errors here
	  console.log(errorObject);
	})

}

//add book to wishlist using book info from ISBNDB
exports.addBookWish = function addBookWish(username_,isbn13_, res, req)
{
	ISBNDB.Books.get(isbn13_)
	.then(function(bookData){
		a = bookData.author_data[0].name.split(", ");
		author = a[1]+ " "+a[0];
		console.log(author);
		console.log(bookData);
		publicationDate_ = null;
		version_ = null;
		cover_ = null;
		var found = BookTable.findOrCreate({ where: {isbn13: isbn13_},
		defaults: {
			title: bookData.title,
			author: author,
			isbn10: bookData.isbn10,
			isbn13: bookData.isbn13,
			publicationdate: null,
			version: null,
			cover: null
		}
	});
		console.log("backend addBookWish");
		found.then(function(record){});
		found.success(function(record){});
		found.finally(function(){
				console.log("backend addBookWish");

			DB_Interface.addwishListing(username_,isbn13_,res, req);
			isbncover.resolve(isbn13_, function(error,book){
				if(error){
					console.log("Book cover not found");
				}
				else{
					DB_Interface.addBookCover(isbn13_, book.imageLinks.thumbnail, null);
				}
			});

		});


	}, function(errorObject){
	  // .... Handle errors here
	  console.log(errorObject);
	})
}

//updates book table with associated book cover
exports.addBookCover = function addBookCover_(isbn13_, imgpath_, function_)
{
	var found = sequelize.query("UPDATE book SET cover = \'" + imgpath_ + "\' WHERE isbn13 = \'" + isbn13_ + "\';", BookTable);
	found.then(function(record){
		if(function_ != null){
			function_(record);
		}
	});
}
